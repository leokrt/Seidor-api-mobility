{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "Seidor backend test - API mobility"
  },
  "paths": {
    "/cars": {
      "post": {
        "summary": "Create a car",
        "description": "This route is responsible to create a new car in database.",
        "tags": ["Vehicle"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/CarResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get list of cars",
        "description": "This route retrieves vehicles, with optional filters for color and brand.",
        "tags": ["Vehicle"],
        "parameters": [
          {
            "name": "color",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "red"
            }
          },
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "BMW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CarResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "summary": "Retrieve a car by ID",
        "description": "This route retrieves a car from the database by its ID.",
        "tags": ["Vehicle"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarResponse"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a car by ID",
        "description": "This route updates a car in the database by its ID.",
        "tags": ["Vehicle"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarResponse"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a car by ID",
        "description": "This route deletes a car by ID.",
        "tags": ["Vehicle"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drivers": {
      "post": {
        "summary": "Create a driver",
        "description": "This route is responsible to create a new driver in database.",
        "tags": ["Driver"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Driver"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/DriverResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get list of drivers",
        "description": "This route retrieves drivers, with optional filters for color and brand.",
        "tags": ["Driver"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "John Doe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/{id}": {
      "get": {
        "summary": "Retrieve a driver by ID",
        "description": "This route retrieves a driver from the database by its ID.",
        "tags": ["Driver"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverResponse"
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a driver by ID",
        "description": "This route updates a driver in the database by its ID.",
        "tags": ["Driver"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Driver"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverResponse"
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a driver by ID",
        "description": "This route deletes a driver by ID.",
        "tags": ["Driver"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/usage": {
      "post": {
        "summary": "Create a usage record",
        "description": "This route is responsible for creating a new usage record in the database.",
        "tags": ["Usage"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsagePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get list of usage records",
        "description": "This route retrieves usage records, with optional filters for car ID and driver ID.",
        "tags": ["Usage"],
        "parameters": [
          {
            "name": "driverName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "John Doe"
            }
          },
          {
            "name": "carPlate",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "PMM-7878"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Usage record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/usage/{id}": {
      "get": {
        "summary": "Retrieve a usage record by ID",
        "description": "This route retrieves a usage record from the database by its ID.",
        "tags": ["Usage"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Usage record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a usage record by ID",
        "description": "This route updates a usage record in the database by its ID.",
        "tags": ["Usage"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endDate": {
                    "format": "date-time",
                    "example": "2023-01-02T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Usage record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Car": {
        "type": "object",
        "required": ["plate", "color", "brand"],
        "properties": {
          "plate": {
            "type": "string",
            "example": "PMM-7878"
          },
          "color": {
            "type": "string",
            "example": "baby blue"
          },
          "brand": {
            "type": "string",
            "example": "BMW"
          }
        }
      },
      "CarResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/Car" },
          {
            "properties": {
              "id": { "type": "number" },
              "created_at": { "type": "string" },
              "updated_at": { "type": "string" },
              "deleted_at": { "type": "string" }
            }
          }
        ]
      },
      "Driver": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "DriverResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/Driver" },
          {
            "properties": {
              "id": { "type": "number" },
              "created_at": { "type": "string" },
              "updated_at": { "type": "string" },
              "deleted_at": { "type": "string" }
            }
          }
        ]
      },
      "ValidationErrorResponse": {
        "properties": {
          "errors": {
            "type": "array",
            "items": { "type": "string", "example": "Name is required" }
          }
        }
      },
      "ErrorResponse": {
        "properties": {
          "message": { "type": "string", "example": "Driver not found" }
        }
      },
      "UsagePayload": {
        "type": "object",
        "properties": {
          "carId": {
            "type": "integer",
            "example": 1
          },
          "driverId": {
            "type": "integer",
            "example": 1
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          },
          "reason": {
            "type": "string",
            "example": "get the feedstock"
          }
        }
      },
      "UsageResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          },
          "used_by": {
            "$ref": "#/components/schemas/DriverResponse"
          },
          "used_car": {
            "$ref": "#/components/schemas/CarResponse"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T10:00:00.000Z"
          }
        }
      }
    }
  }
}
